sort1 uses: Bubble sort

How do you know?: It was relatively slower than the other two when dealing with a random order, but was noticably faster when it was given an already sorted list. Since bubble sort is the only one that does not have the same big O as its omega, sort 1 is most likely bubble sort.

sort2 uses: Merge sort

How do you know?: It performed that fastest, or relatively faster in all trials, and throughout all trials, the times remained quite similar for each amount of numbers regardless of whether it was sorted or not. Because of its speed, and the likeliness that its big O is the same as its omega, sort 2 is most likely merge sort.

sort3 uses: Selection sort

How do you know?: It performed the slowest, or relatively slower out of all the sort methods, and even when given a sorted list, it took around the same time to complete sorting as an unsorted list. With likely the same big O and omega, and its slowness, sort 3 is most likely selection sort.
